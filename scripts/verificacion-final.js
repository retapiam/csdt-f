/**
 * Verificaci√≥n Final del Sistema de Gesti√≥n de Proyectos
 * Verifica que todo est√© funcionando correctamente
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç VERIFICACI√ìN FINAL - SISTEMA DE GESTI√ìN DE PROYECTOS');
console.log('='.repeat(70));

// Archivos cr√≠ticos a verificar
const archivosCriticos = [
  'src/services/ProyectosService.js',
  'src/hooks/useProyectos.js',
  'src/services/syncService.js',
  'src/services/api.js',
  'src/contexts/AuthContext.jsx',
  'src/components/SyncDataProvider.jsx'
];

// Componentes principales
const componentes = [
  'src/paginas/12-gestion-proyectos/GestionProyectos.jsx',
  'src/paginas/12-gestion-proyectos/DashboardUnificado.jsx',
  'src/paginas/12-gestion-proyectos/PanelVista.jsx',
  'src/paginas/12-gestion-proyectos/01-administrador/DashboardAdministrador.jsx',
  'src/paginas/12-gestion-proyectos/02-operador/DashboardOperador.jsx',
  'src/paginas/12-gestion-proyectos/03-cliente/DashboardCliente.jsx'
];

// Verificar archivos cr√≠ticos
console.log('\nüîß VERIFICANDO ARCHIVOS CR√çTICOS:');
let archivosCriticosOK = 0;

archivosCriticos.forEach(archivo => {
  const ruta = path.resolve(__dirname, '..', archivo);
  if (fs.existsSync(ruta)) {
    console.log(`‚úÖ ${archivo}`);
    archivosCriticosOK++;
  } else {
    console.log(`‚ùå ${archivo} - NO ENCONTRADO`);
  }
});

// Verificar componentes
console.log('\nüì± VERIFICANDO COMPONENTES:');
let componentesOK = 0;

componentes.forEach(componente => {
  const ruta = path.resolve(__dirname, '..', componente);
  if (fs.existsSync(ruta)) {
    console.log(`‚úÖ ${componente}`);
    componentesOK++;
  } else {
    console.log(`‚ùå ${componente} - NO ENCONTRADO`);
  }
});

// Verificar importaciones en componentes principales
console.log('\nüîç VERIFICANDO IMPORTACIONES:');

const verificarImportaciones = (archivo) => {
  const ruta = path.resolve(__dirname, '..', archivo);
  if (!fs.existsSync(ruta)) return { archivo, errores: ['Archivo no encontrado'] };

  const contenido = fs.readFileSync(ruta, 'utf8');
  const errores = [];

  // Verificar importaciones de contextos
  if (contenido.includes('useAuth') && !contenido.includes("from '@contexts/AuthContext'")) {
    errores.push('Importaci√≥n de AuthContext incorrecta');
  }

  // Verificar importaciones de hooks
  if (contenido.includes('useProyectos') && !contenido.includes("from '@hooks/useProyectos'")) {
    errores.push('Importaci√≥n de useProyectos incorrecta');
  }

  // Verificar importaciones de servicios
  if (contenido.includes('ProyectosService') && !contenido.includes("from '@services/ProyectosService'")) {
    errores.push('Importaci√≥n de ProyectosService incorrecta');
  }

  return { archivo, errores };
};

let totalErroresImportacion = 0;
componentes.forEach(componente => {
  const resultado = verificarImportaciones(componente);
  if (resultado.errores.length === 0) {
    console.log(`‚úÖ ${componente} - Importaciones correctas`);
  } else {
    console.log(`‚ùå ${componente} - Errores de importaci√≥n:`);
    resultado.errores.forEach(error => {
      console.log(`   - ${error}`);
      totalErroresImportacion++;
    });
  }
});

// Verificar sincronizaci√≥n
console.log('\nüîÑ VERIFICANDO SINCRONIZACI√ìN:');

const verificarSincronizacion = (archivo) => {
  const ruta = path.resolve(__dirname, '..', archivo);
  if (!fs.existsSync(ruta)) return { archivo, sincronizado: false };

  const contenido = fs.readFileSync(ruta, 'utf8');
  
  const patronesSincronizacion = [
    /useProyectos/,
    /useEstadisticasProyectos/,
    /useTareas/,
    /autoSync.*true/,
    /api\.(get|post|put|delete)/,
    /syncService/
  ];

  const patronesEncontrados = patronesSincronizacion.filter(patron => patron.test(contenido));
  
  return { 
    archivo, 
    sincronizado: patronesEncontrados.length >= 2,
    patrones: patronesEncontrados.length
  };
};

let archivosSincronizados = 0;
componentes.forEach(componente => {
  const resultado = verificarSincronizacion(componente);
  if (resultado.sincronizado) {
    console.log(`‚úÖ ${componente} - Sincronizado (${resultado.patrones} patrones)`);
    archivosSincronizados++;
  } else {
    console.log(`‚ùå ${componente} - No sincronizado (${resultado.patrones} patrones)`);
  }
});

// Verificar configuraci√≥n de API
console.log('\n‚öôÔ∏è VERIFICANDO CONFIGURACI√ìN DE API:');

const apiConfigPath = path.resolve(__dirname, '..', 'src/services/api.js');
if (fs.existsSync(apiConfigPath)) {
  const apiContent = fs.readFileSync(apiConfigPath, 'utf8');
  
  const configuraciones = [
    { nombre: 'Configuraci√≥n de MySQL', check: apiContent.includes('MySQL') },
    { nombre: 'URLs de API configuradas', check: apiContent.includes('API_CONFIGS') },
    { nombre: 'Timeouts configurados', check: apiContent.includes('timeout') },
    { nombre: 'Configuraci√≥n de producci√≥n', check: apiContent.includes('produccion') },
    { nombre: 'Configuraci√≥n de desarrollo', check: apiContent.includes('desarrollo') }
  ];
  
  let configuracionesOK = 0;
  configuraciones.forEach(({ nombre, check }) => {
    if (check) {
      console.log(`‚úÖ ${nombre}`);
      configuracionesOK++;
    } else {
      console.log(`‚ùå ${nombre}`);
    }
  });
  
  console.log(`üìä Configuraciones correctas: ${configuracionesOK}/${configuraciones.length}`);
} else {
  console.log('‚ùå Archivo de configuraci√≥n de API no encontrado');
}

// Resumen final
console.log('\n' + '='.repeat(70));
console.log('üìã RESUMEN FINAL');
console.log('='.repeat(70));

console.log(`üîß Archivos cr√≠ticos: ${archivosCriticosOK}/${archivosCriticos.length}`);
console.log(`üì± Componentes: ${componentesOK}/${componentes.length}`);
console.log(`üîç Errores de importaci√≥n: ${totalErroresImportacion}`);
console.log(`üîÑ Archivos sincronizados: ${archivosSincronizados}/${componentes.length}`);

const totalElementos = archivosCriticos.length + componentes.length;
const elementosOK = archivosCriticosOK + componentesOK;
const porcentajeCompletado = Math.round((elementosOK / totalElementos) * 100);

console.log(`üìä Porcentaje completado: ${porcentajeCompletado}%`);

if (totalErroresImportacion === 0 && archivosSincronizados >= componentes.length * 0.8) {
  console.log('\nüéâ ¬°VERIFICACI√ìN EXITOSA!');
  console.log('‚úÖ Todos los archivos cr√≠ticos est√°n presentes');
  console.log('‚úÖ Las importaciones est√°n correctas');
  console.log('‚úÖ La sincronizaci√≥n est√° implementada');
  console.log('‚úÖ El sistema est√° listo para usar');
  
  console.log('\nüöÄ PR√ìXIMOS PASOS:');
  console.log('1. Ejecutar: npm run dev');
  console.log('2. Acceder a: http://localhost:5173/12-gestion-proyectos');
  console.log('3. Probar con diferentes roles de usuario');
  console.log('4. Verificar sincronizaci√≥n con backend Laravel');
  
} else {
  console.log('\n‚ö†Ô∏è VERIFICACI√ìN CON PROBLEMAS');
  if (totalErroresImportacion > 0) {
    console.log(`‚ùå Se encontraron ${totalErroresImportacion} errores de importaci√≥n`);
  }
  if (archivosSincronizados < componentes.length * 0.8) {
    console.log('‚ùå Algunos componentes no est√°n sincronizados');
  }
  console.log('üí° Revisa los problemas listados arriba para solucionarlos');
}

console.log('\n' + '='.repeat(70));
console.log('üéØ Sistema de Gesti√≥n de Proyectos - CSDT');
console.log('üìÖ Verificado: ' + new Date().toLocaleDateString('es-CO'));
console.log('='.repeat(70));
